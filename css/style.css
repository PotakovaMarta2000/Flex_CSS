/* Для работы с гибким свойством, задаем ему значение:
display: flex;  */

/* По умолчанию свойство имеет значение по оси X -по горизонтали:
flex-direction: row; */

/* Можем задать свойству значение по оси Y -по вертикали задав:
flex-direction: column; */

/* Можем задать свойству реверсивное значение, т.е. в обратном направлении или справа-налево задав:
flex-direction: reverse; */

/* Можем менять значение внутри самого элемента задав свойство:
order: 1; по умолчанию /элемент с самым большим значением уходит в конец контейнера*/

/* Выравнивание элементов внутри контейнера
по основной (главной оси) используется свойство justify-content, которое имеет следующие свойства:
justify-content: flex-start; начало контейнера
justify-content: flex-end; конец контейнера
justify-content: center; по центру контейнера
justify-content: space-between; равномерно по контейнеру
justify-content: space-around; равномерно по контейнеру с одинаковыми отступами со всех сторон */

/* Выравнивание элементов внутри контейнера
по второстепенной оси используется свойство align-items, которое имеет следующие свойства:
align-items:flex-start; начало
align-items:flex-end; конец
align-items:center; по центру  */

/* Мы можем выравнивать отдельно взятые элементы внутри контейнера при помощи свойства: 
align-self: center/ flex-end/ flex-start; */

/* При переполнении элементов на строке, можем задать свойство flex-wrap: wrap; 
чтобы элементы перемещались на новую строку по необходимости */

/* Свойство flex-shrink отвечает за то, как быстро будет ужиматься элемент при сокращении 
пространства, чем больше значение, тем быстрее ужимается */

/* Свойство flex-grow отвечает за то, сколько пространства будет занимать элемент на экране,
чем больше значение, тем больше займет элемент пространство*/

.container {


}

.item {
	padding: 40px;
	font-size: 25px;
	border: 1px solid black;
}

.item_1 {
background: aqua;
}

.item_2 {
background:lightcoral;
}

.item_3 {
background: lightgreen;
}